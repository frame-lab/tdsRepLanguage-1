MODULE main
VAR
    time : 0..6;
    modoEntrada : boolean;
    enumerado: {OCUPADO};
    automata : finalAutomata(time,modoEntrada);

ASSIGN 
    init(time) := 0;
    init(modoEntrada) := FALSE; 
    next(time) := case 
        time = 6 : 0;
        TRUE     : time + 1;
    esac;
    next(modoEntrada) := case
    	next(time) = 2 : TRUE;
    	time = 6 : FALSE;
    	TRUE : modoEntrada;
    esac;	    

MODULE portsModule(time,modoEntrada)
VAR
	a: {0, 1, NULL};
	b: {0, 1, NULL};
	balt: {1};
	c: {0, 1, NULL};
	d: {0, 1, NULL};
	invertScopeB : boolean;

ASSIGN

	init(a):= 0;
	init(b):= NULL;
	init(invertScopeB) := !modoEntrada;
	init(c):= case
				a = NULL : b ; 
				b = NULL : a ; 
				TRUE : NULL ;
			esac; 

	init(d):= NULL;		

	next(invertScopeB) := !next(modoEntrada);



	next(a):=
			case
				next(time) = 1 : 1;
				next(time) = 2 : 0;
				next(time) = 0 : 0; --reset para valor init
				TRUE : NULL;
			esac;

	next(b):=
			case
				next(time) = 0 | next(time) < 2: NULL; --reset ou ainda B ainda não começou a ser aplicado
				invertScopeB = FALSE  & next(time) != 6 : next(time) mod 2;
				TRUE : NULL;
			esac;			

	next(c):=
			case
				next(a) = NULL : next(b) ; -- comportamento de merger 
				next(b) = NULL : next(a) ; -- só pode receber um por vez
				TRUE : NULL ;
			esac;

	next(d):= case
				d = NULL : c; -- comportamento delayed
				c = NULL & d != NULL : NULL; 
				TRUE : d; -- só recebe quando não está ocupado
			esac;


MODULE finalAutomata(time, modoEntrada)
 VAR
 	cs : {q0q0, p0q0, p1q0}; 
 	ports : portsModule(time,modoEntrada); 
 ASSIGN
 	init(cs) := {q0q0};	
TRANS	
	( (cs = q0q0 &  ports.b = NULL & ports.c != NULL & ports.a = ports.c 
		& ports.d = NULL  & ports.c = 0 ) -> next(cs) = p0q0 ) &

	( (cs = q0q0 &  ports.a = NULL & ports.c != NULL & ports.b = ports.c 
		& ports.d = NULL  & ports.c = 0 ) -> next(cs) = p0q0 ) &	

	( (cs = q0q0 &  ports.b = NULL & ports.c != NULL & ports.a = ports.c 
		& ports.d = NULL  & ports.c = 1 ) -> next(cs) = p1q0 ) &

	( (cs = q0q0 &  ports.a = NULL & ports.c != NULL & ports.b = ports.c 
		& ports.d = NULL  & ports.c = 1 ) -> next(cs) = p1q0 ) &	

	( (cs = p0q0 & ports.c = NULL & ports.d = 0 ) -> next(cs) = q0q0 ) &

	( (cs = p0q0) -> ( (next(cs) != p1q0 ) ) ) &

	( (cs = p1q0 & ports.c = NULL & ports.d = 1 ) -> next(cs) = q0q0 ) &

	( (cs = p1q0) -> ( (next(cs) != p0q0 ) ) ) 

 

